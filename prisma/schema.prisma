// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  email       String        @unique @db.VarChar(255)
  password    String        @db.VarChar(255)
  name        String        @db.VarChar(255)
  surname     String        @db.VarChar(255)
  cpf         String        @unique @db.VarChar(255)
  phone       String        @db.VarChar(255)
  isOwner     Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Session     Session[]
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id        Int      @id @default(autoincrement())
  title     String        @unique @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Product  Product[]
}

model Tag {
  id        Int      @id @default(autoincrement())
  title     String        @unique @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Product  Product[]
}

model Product {
  id          Int           @id @default(autoincrement())
  title       String        @unique @db.VarChar(255)
  description String        @db.VarChar(255)
  price       Decimal         @db.Decimal(10, 2)
  quantity    Int         @default(0)
  publicUrl   String 
  size        Int?        
  categoryId  Int
  tagId       Int
  emphasis    Boolean     @default(false)
  launch      Boolean     @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Category    Category     @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  Tag         Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
}
